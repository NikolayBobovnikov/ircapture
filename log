diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Inc/usbd_conf.h b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Inc/usbd_conf.h
index 4e19611..dd9e250 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Inc/usbd_conf.h
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Inc/usbd_conf.h
@@ -47,15 +47,15 @@
 /** @addtogroup USBD_OTG_DRIVER
   * @{
   */
-  
+
 /** @defgroup USBD_CONF
   * @brief usb otg low level driver configuration file
   * @{
-  */ 
+  */
 
 /** @defgroup USBD_CONF_Exported_Defines
   * @{
-  */ 
+  */
 
 /*---------- -----------*/
 #define USBD_MAX_NUM_INTERFACES     1
@@ -70,18 +70,18 @@
 /*---------- -----------*/
 #define USBD_SELF_POWERED     1
 /*---------- -----------*/
-#define USBD_CUSTOMHID_OUTREPORT_BUF_SIZE     2
+#define USBD_CUSTOMHID_OUTREPORT_BUF_SIZE     4
 /*---------- -----------*/
-#define USBD_CUSTOM_HID_REPORT_DESC_SIZE     2
+#define USBD_CUSTOM_HID_REPORT_DESC_SIZE     38
 /****************************************/
 /* #define for FS and HS identification */
 #define DEVICE_FS 		0
 
 /** @defgroup USBD_Exported_Macros
   * @{
-  */ 
+  */
 
-/* Memory management macros */  
+/* Memory management macros */
 #define USBD_malloc               (uint32_t *)USBD_static_malloc
 #define USBD_free                 USBD_static_free
 #define USBD_memset               /* Not used */
@@ -92,72 +92,72 @@
 /* For footprint reasons and since only one allocation is handled in the HID class
    driver, the malloc/free is changed into a static allocation method */
 void *USBD_static_malloc(uint32_t size);
-void USBD_static_free(void *p);    
+void USBD_static_free(void *p);
 
-/* DEBUG macros */    
+/* DEBUG macros */
 #if (USBD_DEBUG_LEVEL > 0)
 #define  USBD_UsrLog(...)   printf(__VA_ARGS__);\
                             printf("\n");
 #else
-#define USBD_UsrLog(...)   
-#endif 
-                            
-                            
+#define USBD_UsrLog(...)
+#endif
+
+
 #if (USBD_DEBUG_LEVEL > 1)
 
 #define  USBD_ErrLog(...)   printf("ERROR: ") ;\
                             printf(__VA_ARGS__);\
                             printf("\n");
 #else
-#define USBD_ErrLog(...)   
-#endif 
-                            
-                            
-#if (USBD_DEBUG_LEVEL > 2)                         
+#define USBD_ErrLog(...)
+#endif
+
+
+#if (USBD_DEBUG_LEVEL > 2)
 #define  USBD_DbgLog(...)   printf("DEBUG : ") ;\
                             printf(__VA_ARGS__);\
                             printf("\n");
 #else
-#define USBD_DbgLog(...)                         
+#define USBD_DbgLog(...)
 #endif
-                            
+
 /**
   * @}
-  */ 
- 
-    
-    
+  */
+
+
+
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CONF_Exported_Types
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CONF_Exported_Macros
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CONF_Exported_Variables
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CONF_Exported_FunctionsPrototype
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 #ifdef __cplusplus
 }
 #endif
@@ -166,10 +166,10 @@ void USBD_static_free(void *p);
 
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-  */ 
+  */
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 
diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Inc/usbd_customhid.h b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Inc/usbd_customhid.h
index 16c140c..f1024ba 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Inc/usbd_customhid.h
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Inc/usbd_customhid.h
@@ -16,16 +16,16 @@
   *
   *        http://www.st.com/software_license_agreement_liberty_v2
   *
-  * Unless required by applicable law or agreed to in writing, software 
-  * distributed under the License is distributed on an "AS IS" BASIS, 
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   ******************************************************************************
   */
- 
-/* Define to prevent recursive inclusion -------------------------------------*/ 
+
+/* Define to prevent recursive inclusion -------------------------------------*/
 #ifndef __USB_CUSTOMHID_H
 #define __USB_CUSTOMHID_H
 
@@ -39,21 +39,21 @@
 /** @addtogroup STM32_USB_DEVICE_LIBRARY
   * @{
   */
-  
+
 /** @defgroup USBD_CUSTOM_HID
   * @brief This file is the Header file for USBD_customhid.c
   * @{
-  */ 
+  */
 
 
 /** @defgroup USBD_CUSTOM_HID_Exported_Defines
   * @{
-  */ 
+  */
 #define CUSTOM_HID_EPIN_ADDR                 0x81
-#define CUSTOM_HID_EPIN_SIZE                 0x02
+#define CUSTOM_HID_EPIN_SIZE                 4
 
 #define CUSTOM_HID_EPOUT_ADDR                0x01
-#define CUSTOM_HID_EPOUT_SIZE                0x02
+#define CUSTOM_HID_EPOUT_SIZE                4
 
 #define USB_CUSTOM_HID_CONFIG_DESC_SIZ       41
 #define USB_CUSTOM_HID_DESC_SIZ              9
@@ -72,7 +72,7 @@
 #define CUSTOM_HID_REQ_GET_REPORT            0x01
 /**
   * @}
-  */ 
+  */
 
 
 /** @defgroup USBD_CORE_Exported_TypesDefinitions
@@ -83,66 +83,66 @@ typedef enum
   CUSTOM_HID_IDLE = 0,
   CUSTOM_HID_BUSY,
 }
-CUSTOM_HID_StateTypeDef; 
+CUSTOM_HID_StateTypeDef;
 
 typedef struct _USBD_CUSTOM_HID_Itf
 {
   uint8_t                  *pReport;
   int8_t (* Init)          (void);
   int8_t (* DeInit)        (void);
-  int8_t (* OutEvent)      (uint8_t, uint8_t );   
+  int8_t (* OutEvent)      (uint8_t, uint8_t );
 
 }USBD_CUSTOM_HID_ItfTypeDef;
 
 typedef struct
 {
   uint8_t              Report_buf[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE];
-  uint32_t             Protocol;   
-  uint32_t             IdleState;  
+  uint32_t             Protocol;
+  uint32_t             IdleState;
   uint32_t             AltSetting;
-  uint32_t             IsReportAvailable;  
-  CUSTOM_HID_StateTypeDef     state;  
+  uint32_t             IsReportAvailable;
+  CUSTOM_HID_StateTypeDef     state;
 }
-USBD_CUSTOM_HID_HandleTypeDef; 
+USBD_CUSTOM_HID_HandleTypeDef;
 /**
   * @}
-  */ 
+  */
 
 
 
 /** @defgroup USBD_CORE_Exported_Macros
   * @{
-  */ 
+  */
 
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CORE_Exported_Variables
   * @{
-  */ 
+  */
 
 extern USBD_ClassTypeDef  USBD_CUSTOM_HID;
 #define USBD_CUSTOM_HID_CLASS    &USBD_CUSTOM_HID
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USB_CORE_Exported_Functions
   * @{
-  */ 
-uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef *pdev, 
+  */
+uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef *pdev,
                                  uint8_t *report,
                                  uint16_t len);
 
 
 
-uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
+uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                              USBD_CUSTOM_HID_ItfTypeDef *fops);
 
 /**
   * @}
-  */ 
+  */
 
 #ifdef __cplusplus
 }
@@ -151,10 +151,10 @@ uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
 #endif  /* __USB_CUSTOMHID_H */
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-  */ 
-  
+  */
+
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Src/usbd_customhid.c b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Src/usbd_customhid.c
index 7172465..50576b6 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Src/usbd_customhid.c
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Middlewares/ST/STM32_USB_Device_Library/Class/CustomHID/Src/usbd_customhid.c
@@ -7,22 +7,22 @@
   * @brief   This file provides the CUSTOM_HID core functions.
   *
   * @verbatim
-  *      
-  *          ===================================================================      
+  *
+  *          ===================================================================
   *                                CUSTOM_HID Class  Description
-  *          =================================================================== 
+  *          ===================================================================
   *           This module manages the CUSTOM_HID class V1.11 following the "Device Class Definition
   *           for Human Interface Devices (CUSTOM_HID) Version 1.11 Jun 27, 2001".
   *           This driver implements the following aspects of the specification:
   *             - The Boot Interface Subclass
   *             - Usage Page : Generic Desktop
   *             - Usage : Vendor
-  *             - Collection : Application 
-  *      
+  *             - Collection : Application
+  *
   * @note     In HS mode and when the DMA is used, all variables and data structures
   *           dealing with the DMA during the transaction process should be 32-bit aligned.
-  *           
-  *      
+  *
+  *
   *  @endverbatim
   *
   ******************************************************************************
@@ -36,14 +36,14 @@
   *
   *        http://www.st.com/software_license_agreement_liberty_v2
   *
-  * Unless required by applicable law or agreed to in writing, software 
-  * distributed under the License is distributed on an "AS IS" BASIS, 
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   ******************************************************************************
-  */ 
+  */
 
 /* Includes ------------------------------------------------------------------*/
 #include "usbd_customhid.h"
@@ -56,46 +56,46 @@
   */
 
 
-/** @defgroup USBD_CUSTOM_HID 
+/** @defgroup USBD_CUSTOM_HID
   * @brief usbd core module
   * @{
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_TypesDefinitions
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 
 /** @defgroup USBD_CUSTOM_HID_Private_Defines
   * @{
-  */ 
+  */
 
 /**
   * @}
-  */ 
+  */
 
 
 /** @defgroup USBD_CUSTOM_HID_Private_Macros
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 /** @defgroup USBD_CUSTOM_HID_Private_FunctionPrototypes
   * @{
   */
 
 
-static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx);
 
-static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx);
 
-static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req);
 
 static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length);
@@ -108,26 +108,26 @@ static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum
 static uint8_t  USBD_CUSTOM_HID_EP0_RxReady (USBD_HandleTypeDef  *pdev);
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_Variables
   * @{
-  */ 
+  */
 
-USBD_ClassTypeDef  USBD_CUSTOM_HID = 
+USBD_ClassTypeDef  USBD_CUSTOM_HID =
 {
   USBD_CUSTOM_HID_Init,
   USBD_CUSTOM_HID_DeInit,
   USBD_CUSTOM_HID_Setup,
-  NULL, /*EP0_TxSent*/  
+  NULL , /*EP0_TxSent*/
   USBD_CUSTOM_HID_EP0_RxReady, /*EP0_RxReady*/ /* STATUS STAGE IN */
   USBD_CUSTOM_HID_DataIn, /*DataIn*/
   USBD_CUSTOM_HID_DataOut,
   NULL, /*SOF */
   NULL,
-  NULL,      
+  NULL,
+  USBD_CUSTOM_HID_GetCfgDesc,
   USBD_CUSTOM_HID_GetCfgDesc,
-  USBD_CUSTOM_HID_GetCfgDesc, 
   USBD_CUSTOM_HID_GetCfgDesc,
   USBD_CUSTOM_HID_GetDeviceQualifierDesc,
 };
@@ -146,7 +146,7 @@ __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_CfgDesc[USB_CUSTOM_HID_CONFIG_DESC_
   the configuration*/
   0xC0,         /*bmAttributes: bus powered */
   0x32,         /*MaxPower 100 mA: this current is used for detecting Vbus*/
-  
+
   /************** Descriptor of CUSTOM HID interface ****************/
   /* 09 */
   0x09,         /*bLength: Interface Descriptor size*/
@@ -173,14 +173,14 @@ __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_CfgDesc[USB_CUSTOM_HID_CONFIG_DESC_
   /* 27 */
   0x07,          /*bLength: Endpoint Descriptor size*/
   USB_DESC_TYPE_ENDPOINT, /*bDescriptorType:*/
-  
+
   CUSTOM_HID_EPIN_ADDR,     /*bEndpointAddress: Endpoint Address (IN)*/
   0x03,          /*bmAttributes: Interrupt endpoint*/
   CUSTOM_HID_EPIN_SIZE, /*wMaxPacketSize: 2 Byte max */
   0x00,
   0x20,          /*bInterval: Polling Interval (20 ms)*/
   /* 34 */
-  
+
   0x07,	         /* bLength: Endpoint Descriptor size */
   USB_DESC_TYPE_ENDPOINT,	/* bDescriptorType: */
   CUSTOM_HID_EPOUT_ADDR,  /*bEndpointAddress: Endpoint Address (OUT)*/
@@ -223,11 +223,11 @@ __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_DeviceQualifierDesc[USB_LEN_DEV_QUA
 
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_Functions
   * @{
-  */ 
+  */
 
 /**
   * @brief  USBD_CUSTOM_HID_Init
@@ -236,7 +236,7 @@ __ALIGN_BEGIN static uint8_t USBD_CUSTOM_HID_DeviceQualifierDesc[USB_LEN_DEV_QUA
   * @param  cfgidx: Configuration index
   * @retval status
   */
-static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
 {
   uint8_t ret = 0;
@@ -245,31 +245,31 @@ static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
   USBD_LL_OpenEP(pdev,
                  CUSTOM_HID_EPIN_ADDR,
                  USBD_EP_TYPE_INTR,
-                 CUSTOM_HID_EPIN_SIZE);  
-  
+                 CUSTOM_HID_EPIN_SIZE);
+
   /* Open EP OUT */
   USBD_LL_OpenEP(pdev,
                  CUSTOM_HID_EPOUT_ADDR,
                  USBD_EP_TYPE_INTR,
                  CUSTOM_HID_EPOUT_SIZE);
-  
+
   pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
-  
+
   if(pdev->pClassData == NULL)
   {
-    ret = 1; 
+    ret = 1;
   }
   else
   {
     hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
-      
+
     hhid->state = CUSTOM_HID_IDLE;
     ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
-          /* Prepare Out endpoint to receive 1st packet */ 
-    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
+          /* Prepare Out endpoint to receive 1st packet */
+    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
                            USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
   }
-    
+
   return ret;
 }
 
@@ -280,17 +280,17 @@ static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
   * @param  cfgidx: Configuration index
   * @retval status
   */
-static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
 {
   /* Close CUSTOM_HID EP IN */
   USBD_LL_CloseEP(pdev,
                   CUSTOM_HID_EPIN_ADDR);
-  
+
   /* Close CUSTOM_HID EP OUT */
   USBD_LL_CloseEP(pdev,
                   CUSTOM_HID_EPOUT_ADDR);
-  
+
   /* FRee allocated memory */
   if(pdev->pClassData != NULL)
   {
@@ -308,7 +308,7 @@ static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
   * @param  req: usb requests
   * @retval status
   */
-static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
 {
   uint16_t len = 0;
@@ -317,46 +317,46 @@ static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
 
   switch (req->bmRequest & USB_REQ_TYPE_MASK)
   {
-  case USB_REQ_TYPE_CLASS :  
+  case USB_REQ_TYPE_CLASS :
     switch (req->bRequest)
     {
-      
-      
+
+
     case CUSTOM_HID_REQ_SET_PROTOCOL:
       hhid->Protocol = (uint8_t)(req->wValue);
       break;
-      
+
     case CUSTOM_HID_REQ_GET_PROTOCOL:
-      USBD_CtlSendData (pdev, 
+      USBD_CtlSendData (pdev,
                         (uint8_t *)&hhid->Protocol,
-                        1);    
+                        1);
       break;
-      
+
     case CUSTOM_HID_REQ_SET_IDLE:
       hhid->IdleState = (uint8_t)(req->wValue >> 8);
       break;
-      
+
     case CUSTOM_HID_REQ_GET_IDLE:
-      USBD_CtlSendData (pdev, 
+      USBD_CtlSendData (pdev,
                         (uint8_t *)&hhid->IdleState,
-                        1);        
-      break;      
-    
+                        1);
+      break;
+
     case CUSTOM_HID_REQ_SET_REPORT:
       hhid->IsReportAvailable = 1;
       USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
-      
+
       break;
     default:
       USBD_CtlError (pdev, req);
-      return USBD_FAIL; 
+      return USBD_FAIL;
     }
     break;
-    
+
   case USB_REQ_TYPE_STANDARD:
     switch (req->bRequest)
     {
-    case USB_REQ_GET_DESCRIPTOR: 
+    case USB_REQ_GET_DESCRIPTOR:
       if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
       {
         len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
@@ -364,22 +364,22 @@ static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
       }
       else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
       {
-        pbuf = USBD_CUSTOM_HID_Desc;   
+        pbuf = USBD_CUSTOM_HID_Desc;
         len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
       }
-      
-      USBD_CtlSendData (pdev, 
+
+      USBD_CtlSendData (pdev,
                         pbuf,
                         len);
-      
+
       break;
-      
+
     case USB_REQ_GET_INTERFACE :
       USBD_CtlSendData (pdev,
                         (uint8_t *)&hhid->AltSetting,
                         1);
       break;
-      
+
     case USB_REQ_SET_INTERFACE :
       hhid->AltSetting = (uint8_t)(req->wValue);
       break;
@@ -389,25 +389,25 @@ static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
 }
 
 /**
-  * @brief  USBD_CUSTOM_HID_SendReport 
+  * @brief  USBD_CUSTOM_HID_SendReport
   *         Send CUSTOM_HID Report
   * @param  pdev: device instance
   * @param  buff: pointer to report
   * @retval status
   */
-uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
+uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                  uint8_t *report,
                                  uint16_t len)
 {
   USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
-  
+
   if (pdev->dev_state == USBD_STATE_CONFIGURED )
   {
     if(hhid->state == CUSTOM_HID_IDLE)
     {
       hhid->state = CUSTOM_HID_BUSY;
-      USBD_LL_Transmit (pdev, 
-                        CUSTOM_HID_EPIN_ADDR,                                      
+      USBD_LL_Transmit (pdev,
+                        CUSTOM_HID_EPIN_ADDR,
                         report,
                         len);
     }
@@ -416,7 +416,7 @@ uint8_t USBD_CUSTOM_HID_SendReport     (USBD_HandleTypeDef  *pdev,
 }
 
 /**
-  * @brief  USBD_CUSTOM_HID_GetCfgDesc 
+  * @brief  USBD_CUSTOM_HID_GetCfgDesc
   *         return configuration descriptor
   * @param  speed : current device speed
   * @param  length : pointer data length
@@ -435,11 +435,11 @@ static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
   * @param  epnum: endpoint index
   * @retval status
   */
-static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
 {
-  
-  /* Ensure that the FIFO is empty before a new transfer, this condition could 
+
+  /* Ensure that the FIFO is empty before a new transfer, this condition could
   be caused by  a new transfer before the end of the previous transfer */
   ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 
@@ -453,16 +453,16 @@ static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
   * @param  epnum: endpoint index
   * @retval status
   */
-static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev, 
+static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
 {
-  
-  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
-  
-  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
+
+  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
+
+  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
                                                             hhid->Report_buf[1]);
-    
-  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
+
+  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
                          USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 
   return USBD_OK;
@@ -476,20 +476,20 @@ static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
   */
 uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
 {
-  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
+  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 
   if (hhid->IsReportAvailable == 1)
   {
-    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
+    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
                                                               hhid->Report_buf[1]);
-    hhid->IsReportAvailable = 0;      
+    hhid->IsReportAvailable = 0;
   }
 
   return USBD_OK;
 }
 
 /**
-* @brief  DeviceQualifierDescriptor 
+* @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
@@ -506,31 +506,31 @@ static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
   * @param  fops: CUSTOMHID Interface callback
   * @retval status
   */
-uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
+uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                              USBD_CUSTOM_HID_ItfTypeDef *fops)
 {
   uint8_t  ret = USBD_FAIL;
-  
+
   if(fops != NULL)
   {
     pdev->pUserData= fops;
-    ret = USBD_OK;    
+    ret = USBD_OK;
   }
-  
+
   return ret;
 }
 /**
   * @}
-  */ 
+  */
 
 
 /**
   * @}
-  */ 
+  */
 
 
 /**
   * @}
-  */ 
+  */
 
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/main.c b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/main.c
index 7c905ee..e1b8aa2 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/main.c
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/main.c
@@ -59,7 +59,7 @@ static void MX_TIM2_Init(void);
 
 /* USER CODE BEGIN PFP */
 /* Private function prototypes -----------------------------------------------*/
-
+static void InitDebugGPIO();
 /* USER CODE END PFP */
 
 /* USER CODE BEGIN 0 */
@@ -89,13 +89,17 @@ int main(void)
   MX_USB_DEVICE_Init();
 
   /* USER CODE BEGIN 2 */
-
+    InitDebugGPIO();
   /* USER CODE END 2 */
 
   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while (1)
   {
+    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
+    HAL_Delay(500);
+
+    //USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &FS_Desc, DEVICE_FS)
   /* USER CODE END WHILE */
 
   /* USER CODE BEGIN 3 */
@@ -193,9 +197,9 @@ void MX_TIM2_Init(void)
 
 }
 
-/** Configure pins as 
-        * Analog 
-        * Input 
+/** Configure pins as
+        * Analog
+        * Input
         * Output
         * EVENT_OUT
         * EXTI
@@ -210,7 +214,16 @@ void MX_GPIO_Init(void)
 }
 
 /* USER CODE BEGIN 4 */
-
+static void InitDebugGPIO()
+{
+    __GPIOC_CLK_ENABLE();
+    GPIO_InitTypeDef GPIO_InitStruct;
+    GPIO_InitStruct.Pin = GPIO_PIN_13;
+    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
+    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
+    GPIO_InitStruct.Pull = GPIO_NOPULL;
+    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
+}
 /* USER CODE END 4 */
 
 #ifdef USE_FULL_ASSERT
@@ -235,10 +248,10 @@ void assert_failed(uint8_t* file, uint32_t line)
 
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-*/ 
+*/
 
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_custom_hid_if.c b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_custom_hid_if.c
index 1316415..692df7c 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_custom_hid_if.c
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_custom_hid_if.c
@@ -38,51 +38,51 @@
   * @{
   */
 
-/** @defgroup USBD_CUSTOM_HID 
+/** @defgroup USBD_CUSTOM_HID
   * @brief usbd core module
   * @{
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_TypesDefinitions
   * @{
-  */ 
+  */
 /* USER CODE BEGIN PRIVATE_TYPES  */
-/* USER CODE END PRIVATE_TYPES */ 
+/* USER CODE END PRIVATE_TYPES */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_Defines
   * @{
-  */ 
+  */
 /* USER CODE BEGIN PRIVATE_DEFINES  */
 /* USER CODE END PRIVATE_DEFINES */
-  
+
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_CUSTOM_HID_Private_Macros
   * @{
-  */ 
+  */
 /* USER CODE BEGIN PRIVATE_MACRO  */
 /* USER CODE END PRIVATE_MACRO */
 
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_AUDIO_IF_Private_Variables
  * @{
  */
 __ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
 {
-  /* USER CODE BEGIN 0 */ 
-  0x00, 
-  /* USER CODE END 0 */ 
+  /* USER CODE BEGIN 0 */
+  0x00,
+  /* USER CODE END 0 */
   0xC0    /*     END_COLLECTION	             */
-   
-}; 
+
+};
 /* USB handler declaration */
 /* Handle for USB Full Speed IP */
   USBD_HandleTypeDef  *hUsbDevice_0;
@@ -91,28 +91,28 @@ __ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DES
 /* USER CODE END  PRIVATE_VARIABLES */
 /**
   * @}
-  */ 
-  
+  */
+
 /** @defgroup USBD_CUSTOM_HID_IF_Exported_Variables
   * @{
-  */ 
+  */
   extern USBD_HandleTypeDef hUsbDeviceFS;
 /* USER CODE BEGIN EXPORTED_VARIABLES  */
 /* USER CODE END  EXPORTED_VARIABLES */
 
 /**
   * @}
-  */ 
-  
+  */
+
 /** @defgroup USBD_CUSTOM_HID_Private_FunctionPrototypes
   * @{
   */
 static int8_t CUSTOM_HID_Init_FS     (void);
 static int8_t CUSTOM_HID_DeInit_FS   (void);
 static int8_t CUSTOM_HID_OutEvent_FS (uint8_t event_idx, uint8_t state);
- 
 
-USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS = 
+
+USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS =
 {
   CUSTOM_HID_ReportDesc_FS,
   CUSTOM_HID_Init_FS,
@@ -130,9 +130,9 @@ USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS =
 static int8_t CUSTOM_HID_Init_FS(void)
 {
   hUsbDevice_0 = &hUsbDeviceFS;
-  /* USER CODE BEGIN 4 */ 
+  /* USER CODE BEGIN 4 */
   return (0);
-  /* USER CODE END 4 */ 
+  /* USER CODE END 4 */
 }
 
 /**
@@ -143,49 +143,49 @@ static int8_t CUSTOM_HID_Init_FS(void)
   */
 static int8_t CUSTOM_HID_DeInit_FS(void)
 {
-  /* USER CODE BEGIN 5 */ 
+  /* USER CODE BEGIN 5 */
   return (0);
-  /* USER CODE END 5 */ 
+  /* USER CODE END 5 */
 }
 
 /**
   * @brief  CUSTOM_HID_OutEvent_FS
-  *         Manage the CUSTOM HID class events       
+  *         Manage the CUSTOM HID class events
   * @param  event_idx: event index
   * @param  state: event state
   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
   */
 static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
-{ 
-  /* USER CODE BEGIN 6 */ 
+{
+  /* USER CODE BEGIN 6 */
   return (0);
-  /* USER CODE END 6 */ 
+  /* USER CODE END 6 */
 }
 
-/* USER CODE BEGIN 7 */ 
+/* USER CODE BEGIN 7 */
 /**
   * @brief  USBD_CUSTOM_HID_SendReport_FS
-  *         Send the report to the Host       
+  *         Send the report to the Host
   * @param  report: the report to be sent
   * @param  len: the report length
   * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
   */
-/*  
+/*
 static int8_t USBD_CUSTOM_HID_SendReport_FS ( uint8_t *report,uint16_t len)
 {
-  return USBD_CUSTOM_HID_SendReport(hUsbDevice_0, report, len); 
+  return USBD_CUSTOM_HID_SendReport(hUsbDevice_0, report, len);
 }
 */
-/* USER CODE END 7 */ 
+/* USER CODE END 7 */
 
 /* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
 /* USER CODE END  PRIVATE_FUNCTIONS_IMPLEMENTATION */
 
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-  */  
+  */
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
diff --git a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_desc.c b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_desc.c
index 7b77f08..add2fe8 100644
--- a/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_desc.c
+++ b/auvir_embed/mocap/sensor-hid/sensor-hid-stm32f103c8t6/Src/usbd_desc.c
@@ -41,46 +41,46 @@
   * @{
   */
 
-/** @defgroup USBD_DESC 
+/** @defgroup USBD_DESC
   * @brief USBD descriptors module
   * @{
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_TypesDefinitions
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_Defines
   * @{
-  */ 
+  */
 #define USBD_VID     1155
 #define USBD_LANGID_STRING     1033
-#define USBD_MANUFACTURER_STRING     "DeepImmersion"
+#define USBD_MANUFACTURER_STRING     "DeepImmersion\0"
 #define USBD_PID_FS     22352
 #define USBD_PRODUCT_STRING_FS     "STM32 IR Mocap Sensor HID"
 /* USER CODE BEGIN SERIALNUMBER_STRING_FS */
 #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
 /* USER CODE END SERIALNUMBER_STRING_FS */
-#define USBD_CONFIGURATION_STRING_FS     "Custom HID Config"
-#define USBD_INTERFACE_STRING_FS     "Custom HID Interface"
+#define USBD_CONFIGURATION_STRING_FS     "DeepImmersion HID Config"
+#define USBD_INTERFACE_STRING_FS     "DeepImmersion HID Interface"
 
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_Macros
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_Variables
   * @{
-  */ 
+  */
 uint8_t *     USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 uint8_t *     USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 uint8_t *     USBD_FS_ManufacturerStrDescriptor ( USBD_SpeedTypeDef speed , uint16_t *length);
@@ -90,13 +90,13 @@ uint8_t *     USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *l
 uint8_t *     USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
 
 #ifdef USB_SUPPORT_USER_STRING_DESC
-uint8_t *     USBD_FS_USRStringDesc (USBD_SpeedTypeDef speed, uint8_t idx , uint16_t *length);  
-#endif /* USB_SUPPORT_USER_STRING_DESC */  
+uint8_t *     USBD_FS_USRStringDesc (USBD_SpeedTypeDef speed, uint8_t idx , uint16_t *length);
+#endif /* USB_SUPPORT_USER_STRING_DESC */
 
 USBD_DescriptorsTypeDef FS_Desc =
 {
   USBD_FS_DeviceDescriptor,
-  USBD_FS_LangIDStrDescriptor, 
+  USBD_FS_LangIDStrDescriptor,
   USBD_FS_ManufacturerStrDescriptor,
   USBD_FS_ProductStrDescriptor,
   USBD_FS_SerialStrDescriptor,
@@ -105,14 +105,14 @@ USBD_DescriptorsTypeDef FS_Desc =
 };
 
 #if defined ( __ICCARM__ ) /*!< IAR Compiler */
-  #pragma data_alignment=4   
+  #pragma data_alignment=4
 #endif
 /* USB Standard Device Descriptor */
 __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
   {
     0x12,                       /*bLength */
     USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
-    0x00,                       /* bcdUSB */  
+    0x00,                       /* bcdUSB */
     0x02,
     0x00,                       /*bDeviceClass*/
     0x00,                       /*bDeviceSubClass*/
@@ -128,43 +128,43 @@ __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
     USBD_IDX_PRODUCT_STR,       /*Index of product string*/
     USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
     USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
-  } ; 
+  } ;
 /* USB_DeviceDescriptor */
 
 #if defined ( __ICCARM__ ) /*!< IAR Compiler */
-  #pragma data_alignment=4   
+  #pragma data_alignment=4
 #endif
 
 /* USB Standard Device Descriptor */
 __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
 {
-     USB_LEN_LANGID_STR_DESC,         
-     USB_DESC_TYPE_STRING,       
+     USB_LEN_LANGID_STR_DESC,
+     USB_DESC_TYPE_STRING,
      LOBYTE(USBD_LANGID_STRING),
-     HIBYTE(USBD_LANGID_STRING), 
+     HIBYTE(USBD_LANGID_STRING),
 };
 
 #if defined ( __ICCARM__ ) /*!< IAR Compiler */
-  #pragma data_alignment=4   
+  #pragma data_alignment=4
 #endif
 __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_FunctionPrototypes
   * @{
-  */ 
+  */
 /**
   * @}
-  */ 
+  */
 
 /** @defgroup USBD_DESC_Private_Functions
   * @{
-  */ 
+  */
 
 /**
-* @brief  USBD_FS_DeviceDescriptor 
+* @brief  USBD_FS_DeviceDescriptor
 *         return the device descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -177,7 +177,7 @@ uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 }
 
 /**
-* @brief  USBD_FS_LangIDStrDescriptor 
+* @brief  USBD_FS_LangIDStrDescriptor
 *         return the LangID string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -185,12 +185,12 @@ uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 */
 uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 {
-  *length =  sizeof(USBD_LangIDDesc);  
+  *length =  sizeof(USBD_LangIDDesc);
   return USBD_LangIDDesc;
 }
 
 /**
-* @brief  USBD_FS_ProductStrDescriptor 
+* @brief  USBD_FS_ProductStrDescriptor
 *         return the product string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -199,18 +199,18 @@ uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *leng
 uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 {
   if(speed == 0)
-  {   
+  {
     USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
   }
   else
   {
-    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
+    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
   }
   return USBD_StrDesc;
 }
 
 /**
-* @brief  USBD_FS_ManufacturerStrDescriptor 
+* @brief  USBD_FS_ManufacturerStrDescriptor
 *         return the manufacturer string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -223,7 +223,7 @@ uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t
 }
 
 /**
-* @brief  USBD_FS_SerialStrDescriptor 
+* @brief  USBD_FS_SerialStrDescriptor
 *         return the serial number string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -232,18 +232,18 @@ uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t
 uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 {
   if(speed  == USBD_SPEED_HIGH)
-  {    
+  {
     USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
   }
   else
   {
-    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
+    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
   }
   return USBD_StrDesc;
 }
 
 /**
-* @brief  USBD_FS_ConfigStrDescriptor 
+* @brief  USBD_FS_ConfigStrDescriptor
 *         return the configuration string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -252,18 +252,18 @@ uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *leng
 uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
 {
   if(speed  == USBD_SPEED_HIGH)
-  {  
+  {
     USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
   }
   else
   {
-    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
+    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
   }
-  return USBD_StrDesc;  
+  return USBD_StrDesc;
 }
 
 /**
-* @brief  USBD_HS_InterfaceStrDescriptor 
+* @brief  USBD_HS_InterfaceStrDescriptor
 *         return the interface string descriptor
 * @param  speed : current device speed
 * @param  length : pointer to data length variable
@@ -279,18 +279,18 @@ uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *l
   {
     USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
   }
-  return USBD_StrDesc;  
+  return USBD_StrDesc;
 }
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-  */ 
+  */
 
 /**
   * @}
-  */ 
+  */
 
 /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
diff --git a/auvir_input_controller/build.sh b/auvir_input_controller/build.sh
index e13b836..f56afa0 100644
--- a/auvir_input_controller/build.sh
+++ b/auvir_input_controller/build.sh
@@ -6,9 +6,3 @@ cd build
 #CMAKE_EXPORT_COMPILE_COMMANDS=ON - for ycm_extra_conf in vim completer plugin
 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=DEBUG ..
 make
-
-#st-flash write v1 stm32test  0x08000000
-
-#openocd -f ../openocd.cfg
-#openocd -f board/stm32vldiscovery.cfg -f interface/stlink-v1.cfg -c "init" -c "reset halt" -c "flash write_image erase stm32test" -c "reset run" -c "shutdown"
-#cp stm32test* ~/Yandex.Disk/dev/auvir/build
diff --git a/auvir_input_controller/libraries/hidapi b/auvir_input_controller/libraries/hidapi
--- a/auvir_input_controller/libraries/hidapi
+++ b/auvir_input_controller/libraries/hidapi
@@ -1 +1 @@
-Subproject commit d17db57b9d4354752e0af42f5f33007a42ef2906
+Subproject commit d17db57b9d4354752e0af42f5f33007a42ef2906-dirty
diff --git a/auvir_input_controller/src/main.cpp b/auvir_input_controller/src/main.cpp
index d15a613..9ecd93a 100644
--- a/auvir_input_controller/src/main.cpp
+++ b/auvir_input_controller/src/main.cpp
@@ -11,10 +11,6 @@
     #include <unistd.h>
 #endif
 
-//#include "imu_sensor.hpp" TODO: combine with IR
-//#include "ir_sensor.hpp"
-
-
 void clearscreen()
 {
 #ifdef __linux
